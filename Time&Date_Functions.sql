-- DATE & TIME FUNCTION

-- The DATE type is used for values with a date part but no time part. 
-- MySQL retrieves and displays DATE values in 'YYYY-MM-DD' format. The supported range is '1000-01-01' to '9999-12-31'.

-- The DATETIME type is used for values that contain both date and time parts. 
-- MySQL retrieves and displays DATETIME values in 'YYYY-MM-DD hh:mm:ss' format.
-- The supported range is '1000-01-01 00:00:00' to '9999-12-31 23:59:59'.

-- The TIMESTAMP data type is used for values that contain both date and time parts.
-- TIMESTAMP has a range of '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC.

-- A DATETIME or TIMESTAMP value can include a trailing fractional seconds part in up to microseconds (6 digits) precision. 

-- 1.ADDDATE(DATE,INTERVAL TIME VALUE)/DATE_ADD()/ADDDATE(DATE, DAYS): ADDS TIME VALUES (INTERVALS) TO GIVEN DATE
SELECT ADDDATE('2024-03-01', INTERVAL 31 DAY); 
SELECT ADDDATE('2024-03-01', INTERVAL 24 MONTH);
SELECT DATE_ADD('2024-03-01', INTERVAL 2 YEAR);
SELECT DATE_ADD('2024-03-01', INTERVAL 8 WEEK);
SELECT ADDDATE('2024-03-01', 12 ); -- WILL ACCEPT ONLY NUMBERS OF DAYS INTEGER VALUES AND NO DAY,WEEK,MONTH,YEAR 
 
 -- 2.SUBDATE(DATE,INTERVAL TIME VALUE)/SUB_ADD()/SUBDATE(DATE, DAYS): SUBTRACTS TIME VALUES (INTERVALS) FROM GIVEN DATE
SELECT SUBDATE('2024-03-01', INTERVAL 31 DAY); 
SELECT SUBDATE('2024-03-01', INTERVAL 24 MONTH);
SELECT DATE_SUB('2024-03-01', INTERVAL 2 YEAR);
SELECT DATE_SUB('2024-03-01', INTERVAL 8 WEEK);
SELECT SUBDATE('2024-03-01', 12 ); -- WILL ACCEPT ONLY NUMBERS OF DAYS INTEGER VALUES AND NO DAY,WEEK,MONTH,YEAR

-- 3.ADDTIME(expr1,expr2): ADD EXPRESSION1,EXPRESSION2 AND RETURNS THE RESULT,RETURNS NULL IF EXPR1 OR EXPR2 IS NULL.
SELECT ADDTIME('2020-01-01 18:05:02','00:10:32.000000');
SELECT ADDTIME('2020-01-01 18:05:02',''); -- RESULT IS NULL

-- 4.SUBTIME(expr1,expr2): SUBTRACTS EXPRESSION1 FROM EXPRESSION2 AND RETURNS THE RESULT,RETURNS NULL IF EXPR1 OR EXPR2 IS NULL.
SELECT SUBTIME('2020-01-01 18:05:02','00:10:32.000000');
SELECT SUBTIME('2020-01-01 18:05:02',''); -- RESULT IS NULL

-- 5.CURDATE()/CURRENT_DATE()/CURRENT_DATE: RETURNS CURRENT DATE AS A VALUE IN 'YYYY-MM-DD' FORMAT IF THE FUNCTION IS USED IN STRING CONTEXT,
									-- RETURNS CURRENT DATE AS A VALUE IN YYYYMMDD FORMAT IF THE FUNCTION IS USED IN NUMERIC CONTEXT.
SELECT curdate(); -- RETURNS DATE IN 'YYYY-MM-DD' FORMAT                           
SELECT current_date() + 0;	-- RETURNS DATE IN YYYYMMDD FORMAT	
SELECT current_date + 2; -- ADDS 2 IN DD AND RETURNS THE RESULT SIMILAR TO ADDDATE()

-- 6.CURTIME([fsp])/CURRENT_TIME()/CURRENT_TIME: RETURNS CURRENT TIME AS A VALUE IN 'hh:mm:ss' FORMAT IF THE FUNCTION IS USED IN STRING CONTEXT,
							 -- RETURNS CURRENT DATE AS A VALUE IN hhmmss FORMAT IF THE FUNCTION IS USED IN NUMERIC CONTEXT. 						
                             -- fsp ARGUMENT IS GIVEN TO SPECIFY A FRACTIONAL SECONDS PERCISION FROM 0 TO 6.
  SELECT CURTIME(); -- RETURNS TIME IN 'HH:MM:SS' FORMAT
  SELECT CURTIME(2); -- RETURNS 2 DIGITS AFTER THE DECIMAL OF SECONDS i.e 'hh:mm:ss.__'
  SELECT CURRENT_TIME + 0; -- RETURNS TIME IN HHMMSS FORMAT
  
  -- 7.NOW([fsp])/LOCALTIME()/LOCALTIME	/LOCALTIMESTAMP/CURRENT_TIMESTAMP()/CURRENT_TIMESTAMP: RETURNS CURRENT DATE AND TIME AS A VALUE IN 'YYYY-MM-DD hh:mm:ss' FORMAT IF THE FUNCTION IS USED IN STRING CONTEXT,
							 -- RETURNS CURRENT DATE AS A VALUE IN YYYYMMDDhhmmss FORMAT IF THE FUNCTION IS USED IN NUMERIC CONTEXT. 						
                             -- fsp ARGUMENT IS GIVEN TO SPECIFY A FRACTIONAL SECONDS PERCISION FROM 0 TO 6.
SELECT CURRENT_TIMESTAMP(); -- RETURNS CURRENT DATE AND TIME IN 'YYYY-MM-DD hh:mm:ss' FORMAT 
SELECT CURRENT_TIMESTAMP + 0; -- RETURNS CURRENT DATE AND TIME IN YYYYMMDDhhmmss FORMAT      
SELECT NOW(2); -- RETURNS 2 DIGITS AFTER THE DECIMAL OF SECONDS i.e 'YYYY-MM-DD hh:mm:ss.__'   

-- 8.CONVERT_TZ(dt,from_tz,to_tz): CONVERTS FROM ONE TIME ZONE TO ANOTHER i.e YOU GET TO THE TIME IN USA OR ANY COUNTRY EVEN IN SQL WITHOUT GOOGLING IT.
SELECT CONVERT_TZ('2020-01-01 18:05:02','+00:00','+10:00');    
SELECT CONVERT_TZ('2020-01-01 18:05:02','GMT','MET'); -- RETURNS NULL IF ANY OF THE ARGUMENTS ARE INVALID OR IF ANY OF THEM IS NULL 

-- 9.DATE(): EXTRACTS THE DATE PART FROM DATE OR DATETIME EXPRESSION 
SELECT DATE('2020-01-01 18:05:02'); -- RETURNS DATE IN 'YYYY-MM-DD' FORMAT

-- 10.DAY()/DAYOFMONTH(): RETURNS DAY OF THE MONTH FROM (0-31)
SELECT DAY('2020-01-01 18:05:02');
SELECT DAYOFMONTH('2020-12-23 18:05:02');

-- 11.MONTHNAME(): RETURNS THE NAME OF THE MONTH FROM GIVEN DATE
SELECT MONTHNAME('2020-01-01 18:05:02');

-- 12.DAYOFWEEK(): RETURNS THE WEEKDAY INDEX OF THE ARGUMENT(GIVEN DATE) i.e 1 FOR MON,2 FOR TUES...
SELECT DAYOFWEEK('2020-12-23 18:05:02');
    
-- 13.DAYNAME(): RETURNS THE NAME OF THE WEEKDAY i.e MONDAY,TUSESDAY...
SELECT DAYNAME('2020-01-01 18:05:02');

-- 14.DAYOFYEAR(): RETURNS THE DAY OF THE YEAR FROM (0 TO 366)
SELECT DAYOFYEAR('2020-12-23 18:05:02');

------------------------------ EXTRACTING PARTS FROM GIVEN DATETIME -------------------------

-- 15.EXTRACT(unit FROM date): EXTRACTS PART OF DATE THAT CAN BE YEAR,MONTH,DAY,WEEK
SELECT EXTRACT(WEEK FROM '2020-12-23 18:05:02'); -- RETURNS WEEK NUMBER i.e 51

-- 16.HOUR()/MINUTE()/MICROSECOND()/TIME()/WEEK()/WEEKDAY()/WEEKOFYEAR()/YEAR()/YEARWEEK()/DATE()/QUARTER(): EXTRACTS THE RESPECTIVE PARTS OF THE GIVEN DATETIME
SELECT HOUR('2020-12-23 18:05:02'); -- RETURNS hh hour
SELECT TIME('2020-12-23 18:05:02'); -- RETURNS hh:mm:ss time
SELECT WEEK('2020-12-23 18:05:02'); -- RETURNS WEEK NUMBER OF THE YEAR STARTS FROM 0 WHERE AS WEEKOFYEAR WEEK NUMBER STARTS FROM 1
SELECT QUARTER('2020-12-23 18:05:02'); -- RETURNS THE QUARTER NUMBER OF THE MONTH AS THERE ARE 4 QUARTERS IN A YEAR EACH CONSISTING OF 3 MONTHS Q1(JAN,FEB,MARCH),Q2(APRIL,MAY,JUNE),Q3,Q4
SELECT YEARWEEK('2020-12-23 18:05:02'); -- RETURNS YEAR AND WEEK 

------------------------------------------- MOST IMPORTANT DATETIME FUNCTIONS------------------------------------------------------

-- 17.DATEDIFF(expr1,expr2): SUBTRACTS expr1 FROM expr2 RETURNS RESULT IN NUMBER OF DAYS , ONLY THE DATE PARTS OF THE VALUES ARE USED IN CALCULATION.
SELECT DATEDIFF('2020-01-01 19:00:52','2020-01-01 18:15:34');

-- 18.TIMEDIFF(expr1,expr2): SUBTRACTS expr1 FROM expr2 RETURNS RESULT IN hh:mm:ss FORMAT.
SELECT TIMEDIFF('2020-01-01 19:00:52','2020-01-01 18:15:34');

-- 19.TIMESTAMPDIFF(unit,expr1,expr2): RETURNS THE DIFFERENCE OF TWO DATETIME EXPRESSIONS, USING THE UNITS SPECIFIED.
SELECT TIMESTAMPDIFF(MINUTE,'2020-01-01 19:00:52','2020-01-01 18:15:34'); -- RETURNS VALUES IN MINUTE

-- 20.PERIOD_DIFF(P1,P2): RETURNS THE NUMBER OF MONTHS BETWEEN PERIODS, P1 AND P2 SHOULD BE IN FORMAT OF YYMM OR YYYYMM AS THEY ARE NOT DATE VALUES
SELECT PERIOD_DIFF(202512,202410);

---------------------------------- CONVERTING ONE FORMAT TO OTHER ---------------------------------------------------
-- 21.DATE_FORMAT(date,format):FORMATS date ACCORDING TO THE format STRING, RETURNS NULL IF EITHER ARGUMENT IS NULL.
SELECT DATE_FORMAT('2020-01-03 00:12:37', '%W %M %Y'); -- RETURNS RESULT IN DAYNAME MONTHNAME YEAR FORMATE

-- 22.STR_TO_DATE(str,format):This is the inverse of the DATE_FORMAT() function. It takes a string str and a format string format. 
-- STR_TO_DATE() returns a DATETIME value if the format string contains both date and time parts, or a DATE or TIME value if the string contains only date or time parts.
-- If str or format is NULL, the function returns NULL
SELECT STR_TO_DATE('01,5,2024','%d,%m,%Y');
-- Scanning starts at the beginning of str and fails if format is found not to match.
-- Extra characters at the end of str are ignored.
 SELECT STR_TO_DATE('a09:30:17','a%h:%i:%s');
 










